apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Chart.Name }}
    component: app
  ports:
  - port: {{ .Values.app.ports.internal }}
    targetPort: {{ .Values.app.ports.internal }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ .Chart.Name }}
  name: {{ .Chart.Name }}-config
  namespace: {{ .Values.namespace }}
data:
  FT_ALLOWED_HOSTS: {{ .Chart.Name }},localhost
  FT_CSRF_TRUSTED_ORIGINS: {{ if .Values.ingress.active }}https://{{ .Values.ingress.fqdn }},{{ end }}http://localhost:{{ .Values.proxy.ports.internal }}
  FT_DB_ENGINE: {{ .Values.app.database.engine }}
  FT_DB_PORT: {{ quote .Values.app.database.port}}
  FT_DEBUG: {{ quote .Values.app.debug }}

---

{{ if .Values.useSealedSecrets -}}
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  labels:
    app: {{ .Chart.Name }}
  name: {{ .Chart.Name }}-secrets
  namespace: {{ .Values.namespace }}
spec:
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    type: Opaque
  encryptedData:
    FT_DB_HOST: {{ .Values.app.database.host }}
    FT_DB_NAME: {{ .Values.app.database.name }}
    FT_DB_PASSWORD: {{ .Values.app.database.password }}
    FT_DB_USERNAME: {{ .Values.app.database.username }}
    FT_SECRET_KEY: {{ .Values.app.secretKey }}
{{- else }}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: {{ .Chart.Name }}
  name: {{ .Chart.Name }}-secrets
  namespace: {{ .Values.namespace }}
data:
  FT_DB_HOST: {{ b64enc .Values.app.database.host }}
  FT_DB_NAME: {{ b64enc .Values.app.database.name }}
  FT_DB_PASSWORD: {{ b64enc .Values.app.database.password }}
  FT_DB_USERNAME: {{ b64enc .Values.app.database.username }}
  FT_SECRET_KEY: {{ b64enc .Values.app.secretKey }}
type: Opaque
{{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.app.replicas }}
  selector:
    matchLabels:
      component: app
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        component: app
        technology: python
    spec:
      initContainers:
      - name: init-migrate
        image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag | default .Chart.AppVersion }}"
        command: ['python3', 'manage.py', 'migrate']
        {{- with .Values.app.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Chart.Name }}-config
        - secretRef:
            name: {{ .Chart.Name }}-secrets
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag | default .Chart.AppVersion }}"
        ports:
        - containerPort: {{ .Values.app.ports.internal }}
        {{- if .Values.app.probes.liveness.active }}
        livenessProbe:
          httpGet:
            path: {{ .Values.app.probes.liveness.path }}
            port: {{ .Values.app.ports.internal }}
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 30
        {{- end }}
        {{- with .Values.app.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Chart.Name }}-config
        - secretRef:
            name: {{ .Chart.Name }}-secrets
      serviceAccountName: {{ .Chart.Name }}
      terminationGracePeriodSeconds: {{ .Values.app.terminationGracePeriodSeconds }}
